// This macro aims to open all single files generated by the CorrSight spinning disk and stitch them together.
// All function used are available from the stable version of Fiji.
// Works on XYZCT acquisition, to be tested on other dataset.
// Intermediate hyperstack are being saved for memory saving purposes.


// Macro author R. De Mets
//Version : 0.1.2, 22/11/2024

// Multichoices of export added on 0.1.1
// Global variables to execute both macros in sequence
// Add progressbar and showProgress on 0.1.2
// setbatchmode to true
// fix saving and ask file format earlier

//var stack_directory="/";
//var nb_X=4;
//var nb_Y=4;


macro "Generate Stacks Button Action Tool - C000D00D01D02D03D04D10D20D30D40DfbDfcDfdDfeDffC000D11D12D13D21D22D23D31D41DbfDcdDceDcfDddDdeDdfDebDecDedDeeDefDf0DfaC000D05C000Df1Df2Df3Df4Df5Df6Df7Df8Df9C000D14DdcC000DeaC000D32C000D50DbeC000C111DdbDe0C111D0fC111DccC111D15C111D60D70D80D90Da0Db0Dc0Dd0DdaC111C222D06D42D51C222D33C222DafC222D24C222D07D08D09D0aD0bD0cD0dD0eC222De9C222C333D52C333De1De2De3De4De5De6De7De8C333Dd9C333C444D61D62D63D64D65D66D67D68D71D72D73D74D75D76D77D78D81D82D83D84D85D86D87D88D91D92D93D94D95D96D97D98Da1Da2Da3Da4Da5Da6Da7Da8Db1Db2Db3Db4Db5Db6Db7Db8Dc1Dc2Dc3Dc4Dc5Dc6Dc7Dc8Dd1Dd2Dd3Dd4Dd5Dd6Dd7Dd8C444DbdC444D34C444Dc9C444D69D79D89D99Da9Db9C444C555DbcC555DaeC555D53C555D54D55D56D57D58C666D59C666DcbC666DcaC666C777D43C777D1fC777D6aD7aD8aD9aDaaDbaC777DbbC777D5aC777D44C777D45D46D47D48D49D4aD9fC777D5bD6bD7bD8bD9bDabC888D4bC888D2fD3fD4fD5fD6fD7fD8fC888D25C888C999D35C999D36D37D38D39D3aC999D3bC999DadC999D4cD5cD6cD7cD8cD9cDacC999CaaaD3cCaaaD26CaaaD3dD4dD5dD6dD7dD8dD9dCaaaCbbbD16D27D28D29D2aD2bD2cCbbbD2dCbbbCcccCdddCeeeD17D18D19D1aD1bD1cD1dCeeeD1eCeeeD9eCeeeCfffD3eD4eD5eD6eD7eD8eCfffD2e"{
	run("Close All");
	setBatchMode(true);
	
	// Choose directory and create output directory
	dirS = getDirectory("Choose source Directory");
	parent_directory = File.getParent(dirS);
	File.makeDirectory(parent_directory+"/Stack");
	stack_directory = parent_directory+ "/Stack";

	title = "[Progress]";
  	run("Text Window...", "name="+ title +" width=30 height=4 monospaced");

	// Extract Metadata from the title of the last tile
	filenames = getFileList(dirS);
	nb_images = filenames.length;
	SplitTitle = split(filenames[nb_images-1],"_"); // cut the title at each _ (anything_dye1_dye2_dye3)
	
	SplitXYZ = split(SplitTitle[1],"-");
	nb_X = parseInt(SplitXYZ[0]);
	nb_Y = parseInt(SplitXYZ[1]);
	nb_Z = parseInt(SplitXYZ[2])+1;
	
	title_no_ext = split(SplitTitle[2],".");
	SplitCT = split(title_no_ext[0],"-");
	nb_C = parseInt(SplitCT[0])+1;
	nb_T = parseInt(SplitCT[1])+1;

	// Open images as sequence and split sequence into stacks 
	nb_tiles = nb_X*nb_Y;
	run("Image Sequence...", "dir=["+dirS+"] sort");
	title_load = getTitle();
	run("Stack Splitter", "number="+nb_tiles);
	close(title_load);
	
	// Select and save stacks with column and line name
	count = 1;
	for (line = 1; line <= nb_X; line++) {
		for (col = 1; col <= nb_Y; col++) {
			save_tile = "stk_"+line+"_"+col;
			if (count<10) {
				title_tile = "stk_000"+count+"_"+title_load;
			}
			else {
				title_tile = "stk_00"+count+"_"+title_load;
			}
			//print("Processing stack "+count+" out of"+nb_Y*nb_X);
			print(title, "\\Update:"+count+"/"+nb_Y*nb_X+" ("+(count*100)/(nb_Y*nb_X)+"%)\n"+getBar(count, nb_Y*nb_X));
			print(title_tile);
			selectWindow(title_tile);
			showProgress(count, nb_Y*nb_X);
			run("Stack to Hyperstack...", "order=xytcz channels="+nb_C+" slices="+nb_Z+" frames="+nb_T+" display=Composite");
			saveAs("Tiff", stack_directory+"/"+save_tile);
			//print(save_tile);
			close(save_tile+".tif");	
			count = count+1;

		}
	}
	Dialog.create("Done");
	Dialog.show();
}

function getBar(p1, p2) {
      n = 20;
      bar1 = "--------------------";
      bar2 = "********************";
      index = round(n*(p1/p2));
      if (index<1) index = 1;
      if (index>n-1) index = n-1;
      return substring(bar2, 0, index) + substring(bar1, index+1, n);
}


// Stitching macros from stacks
macro "Stitch Stacks Button Action Tool - C000D0dDbdDcdDddDedDfdC200D02Ccc0DbcDccDdcDecC100D6dD7dD8dD9dDadCc40DacCf00D13D14D15D16D23D24D25D26D33D34D35D36D43D44D45D46D68D69D6aD6bD78D79D7aD7bD88D89D8aD8bD98D99D9aD9bDb3Db4Db5Db6Dc3Dc4Dc5Dc6Dd3Dd4Dd5Dd6De3De4De5De6Cff0D19D1aD1bD29D2aD2bD39D3aD3bD49D4aD4bD63D64D65D66D73D74D75D76D83D84D85D86D93D94D95D96Db9DbaDbbDc8Dc9DcaDcbDd8Dd9DdaDdbDe8De9DeaDebC720D07C700D04D05D06Cff0D18D28D38D48Db8Ce80D58D59D5aD5bDa7C520D52C600Db2Dc2Dd2De2Ccc0D1cD2cD3cD4cCf50Da8Da9DaaDabC990DfcCc00D6cD7cD8cD9cCfa0Da4Da5Da6C100D5dC400D12D22D32D42Df2Cf40Db7Dc7Dd7De7C880D08Cc00Df3Df4Df5Df6Cea0Da3C660D62D72D82D92C700D03Cf70D57Cbb0Df8Df9DfaDfbCfb0D67D77D87D97Cf40D17D27D37D47Cc30Df7C540Da2C110D1dD2dD3dD4dC880D09D0aD0bCf70D53D54D55D56C660D0cCc70D5c"{

	stack_directory = getDirectory("Choose Stack Directory");
	// File export
	Dialog.create("Export options");
	Dialog.addChoice("File Export Format", newArray("Tiff", "PNG", "Image Sequence", "AVI", "HDF5 (new or replace)...", "OME - TIFF"), "Tiff"); 
	Dialog.show();

	exportChoice  = Dialog.getChoice();
	
	
	if(exportChoice=="AVI"){ // to check but should work
		Dialog.create("AVI Export options");
		Dialog.addNumber("Frame per second", 7) 
		Dialog.show();

		FPS  = parseInt(Dialog.getChoice());
	}

	// Create output directory
	parent_directory = File.getParent(stack_directory);
	File.makeDirectory(parent_directory+"\\Stiching");
	stitch_directory = parent_directory+ "\\Stiching";

	// Get metadata from the last stack
	filenames = getFileList(stack_directory);
	nb_images = filenames.length;

	title_no_ext = split(filenames[nb_images-1],"."); // remove the extension
	SplitTitle = split(title_no_ext[0],"_");// cut the title at each _

	nb_X = parseInt(SplitTitle[1]);
	nb_Y = parseInt(SplitTitle[2]);
	// Run grid stitching
	// Add option for different protocols
	run("Grid/Collection stitching", "type=[Filename defined position] order=[Defined by filename         ] grid_size_x="+nb_Y+" grid_size_y="+nb_X+" tile_overlap=10 first_file_index_i=1 directory=["+stack_directory+"] file_names=[stk_{y}_{x}.tif] output_textfile_name=TileConfiguration.txt fusion_method=[Linear Blending] regression_threshold=0.30 max/avg_displacement_threshold=2.50 absolute_displacement_threshold=3.50 add_tiles_as_rois compute_overlap computation_parameters=[Save memory (but be slower)] image_output=[Fuse and display]");

	print ("Saving in Progress, Please wait ...")
	if (exportChoice=="Tiff"||exportChoice=="PNG") { //works
		saveAs(exportChoice, stitch_directory+"\\Stitched_image");
	}
	else if(exportChoice=="Image Sequence"){ //works
		run("Image Sequence... ", "select=["+stitch_directory+"] dir=["+stitch_directory+"] format=TIFF");
	}
	else if(exportChoice=="AVI"){ // to check but should work
		run("AVI... ", "compression=None frame="+FPS+" save=["+stitch_directory+"\\Fused.avi]");
	}
	else if(exportChoice=="HDF5 (new or replace)..."){
		run("HDF5 (new or replace)...", "save="+stitch_directory+"\\Stitched_image.h5");
	}
	else{
		run("OME-TIFF...", "save="+stitch_directory+"\\Stitched_image.tif export compression=Uncompressed");
	}
	

	Dialog.create("Done");
	Dialog.show();
}

